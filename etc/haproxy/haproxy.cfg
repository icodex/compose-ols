#-----------------------------------------------------------------------------
# global
#-----------------------------------------------------------------------------

global
    stats timeout 30s
    user root
    group root
    daemon
    master-worker
    ulimit-n 1000000
    maxconn     300000
    maxconnrate 300000
    maxsessrate 300000
    maxsslconn  300000
    maxsslrate  300000

    #ssl-engine rdrand  # intel engine available in openssl
    ssl-mode-async

    nbproc 1
    nbthread 4

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    # intermediate configuration, tweak to your needs
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256
    ssl-default-server-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam.pem
    ssl-dh-param-file /usr/local/etc/haproxy/dhparam.pem

    # Tuning if required/needed
    tune.ssl.default-dh-param 2048

    # Tuning HTTP/2 Flow Control window size
    tune.h2.initial-window-size 1048576

#-----------------------------------------------------------------------------
# defaults
#-----------------------------------------------------------------------------

defaults
    log global
    mode    http
    maxconn 300000
    option  httplog
    option  dontlognull
    timeout http-request 10s
    timeout client 30s
    timeout connect 10s
    timeout server 30s
    timeout http-keep-alive 300s
    # for websockets:
    timeout tunnel 2m
    timeout client-fin 1s
    timeout server-fin 1s

    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

#-----------------------------------------------------------------------------
# dns frontend
#-----------------------------------------------------------------------------
resolvers mydns
    nameserver dns0 8.8.8.8:53
    nameserver dns1 8.8.4.4:53
    accepted_payload_size 8192 # allow larger DNS payloads

#-----------------------------------------------------------------------------
# http frontend
#-----------------------------------------------------------------------------

frontend https-in
    bind :80 tfo
    bind :443 tfo ssl crt /usr/local/etc/haproxy/certs/ alpn h2,http/1.1

    # Dont allow more than 100 concurrent tcp connections OR 100 connections in 3 seconds
    tcp-request connection reject if { src_conn_rate(Abuse) ge 100 }
    tcp-request connection reject if { src_conn_cur(Abuse) ge 100 }
    tcp-request connection track-sc1 src table Abuse

    # ABUSE SECTION works with http mode dependent on src ip
    tcp-request content reject if { src_get_gpc0(Abuse) gt 0 }
    acl abuse src_http_req_rate(Abuse) ge 100
    acl flag_abuser src_inc_gpc0(Abuse) ge 0
    acl scanner src_http_err_rate(Abuse) ge 100

    http-request redirect scheme https code 301 unless { ssl_fc }

    # Returns a 403 to the abuser and flags for tcp-reject next time
    http-request deny if abuse flag_abuser
    http-request deny if scanner flag_abuser

    http-request set-header X-Forwarded-Port %[dst_port]
    # Let the real servers know this was originally a HTTPS request
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    http-response set-header Access-Control-Allow-Origin "*"
    acl hsts_exists res.hdr_cnt(Strict-Transport-Security) gt 0
    http-response add-header Strict-Transport-Security max-age=31536000;\ includeSubDomains;\ preload if ! hsts_exists { ssl_fc }

    # Insert a unique request identifier is the headers of the request
    # passed to the backend
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Unique-ID

    http-response set-header X-Frame-Options SAMEORIGIN if
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header Referrer-Policy no-referrer-when-downgrade

    http-response replace-header Location ^(\w+):\/\/([^/:]+)(:\d*)?(?:\/(.*))? http:\/\/\2\/\4 if ! { ssl_fc }
    http-response replace-header Location ^(\w+):\/\/([^/:]+)(:\d*)?(?:\/(.*))? https:\/\/\2\/\4 if { ssl_fc }

    # To update an X-Forwarded-For header to add the client IP at the top of the list
    acl h_xff_exists req.hdr(X-Forwarded-For) -m found
    http-request replace-header X-Forwarded-For (.*) %[src],1 if h_xff_exists

    ## deliver js&css before images(only support v1.9 above)
    acl is_jscss path_end .js .css
    acl is_image path_end .png .gif.jpg .jpeg
    http-request set-priority-class int(1) if is_jscss
    http-request set-priority-class int(10) if is_image
    http-request set-priority-class int(100) if !is_jscss !is_image

    # Default backend (parking)
    default_backend bk-default


#-----------------------------------------------------------------------------
# default backend - parking
#-----------------------------------------------------------------------------

backend bk-default
    mode   http
    option http-pretend-keepalive
    option http-use-htx
    option forwardfor
    compression algo gzip
    compression type text/html text/plain text/css
    retry-on all-retryable-errors
    http-request disable-l7-retry if METH_POST
    acl cloudy src 103.21.244.0/22 103.22.200.0/22 103.31.4.0/22 104.16.0.0/12 108.162.192.0/18 131.0.72.0/22 141.101.64.0/18 162.158.0.0/15 172.64.0.0/13 173.245.48.0/20 188.114.96.0/20 190.93.240.0/20 197.234.240.0/22 198.41.128.0/17 2400:cb00::/32 2405:b500::/32 2606:4700::/32 2803:f800::/32 2c0f:f248::/32 2a06:98c0::/29
    http-request set-header X-Client-IP %[req.hdr(CF-Connecting-IP)] if cloudy
    http-request set-header X-Client-IP %[src] if !cloudy
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    dynamic-cookie-key MYKEY
    cookie ICID insert dynamic httponly
    server default varnish:3128 tfo send-proxy-v2

#-----------------------------------------------------------------------------
# Abuse backend
#-----------------------------------------------------------------------------

backend Abuse
    stick-table type ip size 10m expire 10m store conn_rate(3s),conn_cur,gpc0,http_req_rate(10s),http_err_rate(10s)

#-----------------------------------------------------------------------------
# End-Of-File
#-----------------------------------------------------------------------------


